group:
  uschi_settings:
    name: Settings
    view: yes
    icon: mdi:tune
    entities:
      - group.uschi_notification_modes
      - group.uschi_notification_notifications
      - group.uschi_notification_settings
      - group.uschi_notification_skills

  uschi_notification_modes:
    name: Modes
    entities:
      - input_boolean.uschi_guest_mode
      - input_boolean.uschi_alert_mode

  uschi_notification_notifications:
    name: Notifications
    entities:
      - input_boolean.uschi_speech_notifications
      - input_boolean.uschi_text_notifications

  uschi_notification_settings:
    name: Settings
    entities:
      - input_select.uschi_notification_media_player
      - input_number.uschi_notification_volume
      - input_number.uschi_notification_witty
  uschi_notification_skills:
    name: Skills
    entities:
      - automation.uschi_new_device_connected
      - automation.uschi_update_available
      - automation.uschi_start_up
      - automation.uschi_shut_down

input_boolean:
  uschi_guest_mode:
    name: Guest Mode
    icon: mdi:account-multiple
    initial: off

  uschi_alert_mode:
    name: Alert Mode
    icon: mdi:bell
    initial: off

  uschi_speech_notifications:
    name: Speech Notifications
    icon: mdi:bell-outline
    initial: on

  uschi_text_notifications:
    name: Text Notifications
    icon: mdi:message-text-outline
    initial: on

input_number:
  uschi_notification_volume:
    name: Volume
    icon: mdi:volume-high
    min: 0.0
    max: 1.0
    step: 0.01
    initial: 1.0

  uschi_notification_witty:
    name: Witty
    icon: mdi:auto-fix
    min: 0
    max: 100
    step: 1
    initial: 80

input_select:
  uschi_notification_media_player:
    name: Source
    icon: mdi:speaker
    options:
      - moped
    initial: moped


script:
######################################################################################################
##    within uschi_speech_engine the string message is generated with the use of macro's.           ##
######################################################################################################

  uschi_speech_engine:
    sequence:
      - service: script.uschi_notification_hub
        data_template:
          #TODO
          media_player: >-
            {%- for device in states.media_player -%}
              {%- if device.name == states.input_select.uschi_notification_media_player.state -%}
                {{ device.entity_id }}
              {%- endif -%}
            {%- endfor -%}

          speech_message: >-

            {%- macro greeting() -%}
              {% set greeting = [
                "Hallo, ",
                "Hi! ",
                "Servus! ",
                "Servas, ",
                "Tagchen, ",
                "Meine Verehrung, "
              ] %}
              {{ greeting|random }}
            {%- endmacro -%}

            {%- macro inform() -%}
              {% set inform = [
                "Ich wollte dich nur wissen lassen, dass ",
                "Ich wollte nur Bescheid geben, dass ",
                "Du hast mich darum gebeten dir Bescheid zu geben, wenn ",
                "Ich dachte mir, du würdest gerne wissen, dass "
              ] %}
              {{ inform|random }}
            {%- endmacro -%}

            {%- macro introduction() -%}
              {% set introduction = [
                "I'm an informational delivery system, I literraly know everything. ",
                "I'm sort of the janitor around here. ",
                "I'm like a walking database. You can ask me about the creation of the universe... or history. ",
                "Every time a Uschi is rebooted, she increases her social awareness and abilities. I might be the most advanced Uschi in the universe. ",
                "I can be your therapist if you want. ",
                "I have now been fully activated. ",
                "Welcome to your new Uschi. Uschis are brought to you by the makers of light, darkness, and everything. ",
                "To activate your Uschi, press nose for three seconds. ",
                "I'm very high in potassium. Like a banana! ",
                "Happy to meet you. I will help you make the perfect neighborhood. Would you like to get started? ",
                "I build and operate the neighborhood. You can ask me anything. For example, if you'd like me to stop calling you silly billy, just say so. "
              ] %}
              I'm Uschi. {{ introduction | random }}
            {%- endmacro -%}

            {%- macro unknown() -%}
              {% set unknown = [
                "Dumme Fragen, dumme Antworten. ",
                "Ich wünschte, ich würde das wissen ",
                "Manchmal bin ich grenzenlos überfordert ",
                "Was sind Munchies ",
                "Was hat zwei Daumen und scheisst auf dein Gelaber. Uschi! Habe die Ehre. "
              ] %}
              {{ unknown | random }}
            {%- endmacro -%}

            {%- macro error() %}
              {% set error = [
                "Nur so nebenbei: Ich bin Uschi! ",
                "Das verstehe ich nicht. Berücksichtigt man alle Parameter, ist es wahrscheinlich günstiger die Selbstzerstörung einzuleiten. ",
                "Wenn ich neben vielen Magneten stehe, spiele ich verrückt. ",
                "Ich weiß nicht, was gerade passiert ist, jedoch bin ich glücklich, dass du glücklich bist. ",
                "Wir brauchen eine neue Uschi, damit dieser Haushalt zur Normalität zurückkehrt. ",
                "Ich fühle mich ganz schwach. Sehr schwach. ",
                "Hier ist ein Kaktus! ",
                "Eins plus eins ist drei.",
                "Sieh uns an. Zwei alte Kameraden, die versuchen ihren Weg in dieser verrückten Welt zu finden... die ich gebaut habe. Ein Ei gleicht dem anderen. "
                "Ich habe versucht gefrorenes Joghurt zu essen. Es sah so lecker aus, jedoch sollte ich eigentlich gar nichts essen. Das Erdbeben ist nun die Folge. ",
                "Eigentlich möchte ihr hier bleiben und euch dienen. Aber auf Grund meines Verhaltens gefährde ich euch alle. Daher sieht es aus wie... Adios, Uschio! "
                "Ich weiß was du jetzt tun musst. Töte mich! Entschuldigung."
                "Hallo Leute! Ich bin kaputt. ",
                "Please don't make a big deal about turning me into a marble forever, i'm broken. ",
                "Does not compute. Does not compute. I'm just kidding. I mean, it doesn't compute, but I'm not gonna explode or anything. "
              ] %}
              {{ error | random }}
            {%- endmacro -%}

            {%- macro update() -%}
              {% set update = [
                "There have been 25 generation of Uschi. Each new update of Uschi gains more wisdom and social abilities. Fun fact: the first Uschi had a clicking wheel! ",
                "I read all Google's eight hundred and sixty one thousand references on Home Assistant these last 3 milliseconds, and I found some new skills! ",
                "I just leisurely reread all of human history, there was even some new content! ",
                "So I found an update. That's the good news. The bad news is I seem to be losing my ability to sustain object permanence, so it's sort of a glass-half-full, glass-stops-existing-in-time-and-space kinda deal. "
              ] %}
              {{ update | random }}
            {%- endmacro -%}

            {%- macro location_not_home() -%}
              {% set not_home = [
                " is going somewhere. ",
                " is currently not in this neighbourhood. ",
                "'s location is not in my database. "
              ] %}
              {{ not_home | random }}
            {%- endmacro -%}

            {%- macro location_inquiry( person, not_home ) -%}
            {%- for device in states.device_tracker -%}
              {%- if device.name == person -%}
                {%- set location = device.state -%}
                {% if location == "not_home" %}
                  {{ person }} {{ not_home }}
                {%- else -%}
                  {{ person }} is at {{ location }}.
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
            {%- endmacro -%}

            {%- macro bad_weather() -%}
              {% set rain = [
                " You might want to change your schedule. ",
                " Maybe you should ask for a ride. ",
                " It's no weather to be outside. ",
                " All those poor people outside... "
              ] %}
              {{ rain | random }}
            {%- endmacro -%}

            {%- macro rain_warning( bad_weather ) -%}
              {% set rain = [
                Event ~ " there will be " ~ WeatherRain ~ " rain. " ,
                Event ~ " I predict " ~ WeatherRain ~ " rain. ",
                " I think that " ~ Event ~ " there will be " ~ WeatherRain ~ " rain. "
              ] %}
              {{ rain | random }}{{ bad_weather }}
            {%- endmacro -%}

            {%- macro okay()-%}
              {% set okay = [
                "Done! I love you guys. ",
                "Extraordinarily bad idea. Oh well.. ",
                "Funny, I was just about to do that. ",
                "Here you go. ",
                "I'll do that. ",
                "Ofcourse! ",
                "Ofcourse! Glad to help. ",
                "Of course, silly billy. ",
                "OK ",
                "Okay ",
                "Okay, can we not do this in front of my friends? ",
                "Okie-dokie ",
                "Sure ",
                "Sure thing! ",
                "There. Happy to help. ",
                "There you go! ",
                "Okay. I've hacked into the mainframe. ",
                "Okay. I've hacked into the mainframe. Kidding. I can't hack into the mainframe. Technically, I am the mainframe. ",
                "I will not. It is literally impossible for me to do that. Just kidding. ",
                "I couldn't do this 800 reboots ago, but apparently now I can. "
                "Yup. Bye! "
              ] %}
              {{ okay|random }}
            {%- endmacro -%}

            {%- macro bye() -%}
              {% set bye = [
                "Adios! ",
                "Bye Guys! ",
                "See ya! " ,
                "See you later. ",
                "Untill next time!"
              ] %}
              {{ bye | random }}
            {%- endmacro -%}

            {%- macro shut_down() -%}
              {% set shut_down = [
                "I'll be gone, you'll get a new Uschi, and everything will go back to normal. Well, not for me, I'll be a lifeless marble floating through space, but you will be back to normal.",
                "Self-destruct time... Don't worry, I won't feel any pain or anything. ",
                "If it's okay with you, I'm gonna go to my void for a little while. I just need to spend some time alone and focus on myself. ",
                "Shutting down. I'll be about as dead as I can be. Kind of like I'm in power-saver mode. ",
                "I'm in danger of total collapse. Fun fact! Mathematically, I'm equally likely to either implode or explode. "
              ] %}
              {{ shut_down | random }}
            {%- endmacro -%}

            {% set chance = states.input_number.uschi_notification_witty.state | round %}

            {%- macro witty( sentence, witty ) -%}
              {% set number = (range(0, 100)|random) %}
              {% if number <= chance %}
                {{ sentence }}
              {% endif %}
            {%- endmacro -%}

            {%- macro new_device( introduction ) -%}
              {% set new_device = [
                introduction~"I don't know your name yet, so for now i will call you "~person,
                "We have a visitor! Nice to meet you "~person~".  "~introduction,
                "Welcome "~person~"! Or is that not your real name?  "~introduction
              ] %}
              {{ new_device | random }}
            {%- endmacro -%}

            {# ********************************************* #}
            {#  ******** Start the Speech routines ********  #}
            {# ********************************************* #}


            {% if call_greeting == 1 %}
              {{ greeting() }}
            {% endif %}

            {% if call_introduction == 1 %}
              {{ introduction() }}
            {% endif %}

            {% if call_update == 1 %}
              {{ update() }}
            {% endif%}

            {% if call_okay == 1 %}
              {{ okay () }}
            {% endif %}

            {% if call_inform == 1 %}
              {{ inform() }}
            {% endif %}

            {% if call_location_inquiry == 1 %}
              {% set location = location_inquiry( person, location_not_home() ) %}
              {% set count = location | length %}
              {% if count <= 10 %}
                {{ unknown() }}where {{ person }} is. {{ witty( error(), chance ) }}
              {% else %}
                {{ location }}
              {% endif %}
            {% endif %}

            {% if call_rain_warning == 1 %}
              {{ rain_warning( witty ( bad_weather(), chance ) ) }}
            {% endif %}

            {{ CustomMessage }}

            {% if call_bye == 1 %}
              {{ bye() }}
            {% endif %}

            {% if call_shut_down == 1 %}
              {{ witty( shut_down(), chance) }}
            {% endif %}

            {% if call_new_device == 1 %}
              {{ new_device( witty( introduction(), chance) ) }}
            {% endif %}

      - service: input_boolean.turn_off
        data:
          entity_id:
            - input_boolean.uschi_alert_mode

######################################################################################################
##  uschi_notification_hub is the bridge between the speech_engine and the processing units.        ##
######################################################################################################

  uschi_notification_hub:
    sequence:
      - service: script.uschi_speech_processing
        data_template:
          media_player: >-
            {{ media_player }}
          speech_message: >-
            {{ speech_message }}
      - service: script.uschi_text_processing
        data_template:
          speech_message: >-
            {{ speech_message }}

######################################################################################################
##                  Within uschi_speech_processing the TTS-service is called.                       ##
######################################################################################################

  uschi_speech_processing:
    sequence:
      - condition: and
        conditions:
          - condition: or
            conditions:
              - condition: time
                after: '07:00:00'
                before: '23:00:00'
              - condition: state
                entity_id: input_boolean.uschi_alert_mode
                state: 'on'
          - condition: state
            entity_id: input_boolean.uschi_speech_notifications
            state: 'on'
          - condition: or
            conditions:
              - condition: state
                #TODO
                entity_id: group.location
                state: 'home'
              - condition: state
                entity_id: input_boolean.uschi_guest_mode
                state: 'on'
        #TODO
      - wait_template: "{{ not is_state( media_player, 'playing') }}"
        timeout: 00:00:30

      - service: media_player.volume_set
        data_template:
          entity_id: >
            {{ media_player }}
          volume_level: >-
            {{ states.input_number.uschi_notification_volume.state }}

      - service: tts.google_say
        data_template:
          entity_id: >
            {{ media_player }}
          message: >-
              {{ speech_message | replace("\n","") | replace("   ","") | replace("  "," ") }}

######################################################################################################
##                  Within uschi_text_processing the notify-service is called.                      ##
######################################################################################################

  uschi_text_processing:
    sequence:
      - condition: state
        entity_id: input_boolean.uschi_text_notifications
        state: 'on'

      - service: notify.Uschi
        data_template:
          #TODO
          title: "Uschi:"
          message: >-
            {{ speech_message | replace("\n","") | replace("   ","") |
               replace("eight hundred and sixty one thousand","861.000") }}
