---
# template sensors

- platform: template
  sensors:
    wakeup_start_time_lights:
      friendly_name: 'Fade-in Startzeit'
      value_template: >
        {% if states('input_datetime.wakeup_alarm_time') and states('input_number.wakeup_duration') %}
        {% set alarmtime = states('input_datetime.wakeup_alarm_time') %}
        {% set alarm_hour = alarmtime.split(':')[0] | int %}
        {% set alarm_min = alarmtime.split(':')[1] | int %}
        {% set light_dur = states('input_number.wakeup_duration') | int %}
        {% set alarm_min_light = alarm_min - light_dur %}
        {% if alarm_min_light  < 0 %}
        {% set alarm_min_light = alarm_min_light + 60 %}
        {% set alarm_hour_light = alarm_hour - 1 %}
        {% if alarm_hour_light < 0 %}{% set alarm_hour_light = 23 %}{% endif %}
        {% if alarm_hour_light < 10 %}0{% endif %}{{ alarm_hour_light}}:{% if alarm_min_light < 10 %}0{% endif %}{{ alarm_min_light }}
        {% else %}
        {% if alarm_hour < 10 %}0{% endif %}{{ alarm_hour }}:{% if alarm_min_light < 10 %}0{% endif %}{{ alarm_min_light }}
        {% endif %}
        {% endif %}
    wakeup_open_time_covers:
      friendly_name: 'Rollo Ã¶ffnen Startzeit'
      value_template: >
        {% if states('input_datetime.wakeup_alarm_time') and states('input_number.wakeup_cover_open_delay') %}
        {% set alarmtime = states('input_datetime.wakeup_alarm_time') %}
        {% set alarm_hour = alarmtime.split(':')[0] | int %}
        {% set alarm_min = alarmtime.split(':')[1] | int %}
        {% set cover_dur = states('input_number.wakeup_cover_open_delay') | int %}
        {% set alarm_min_cover = alarm_min + cover_dur %}
        {% if alarm_min_cover  > 59 %}
        {% set alarm_min_cover = alarm_min_cover - 60 %}
        {% set alarm_hour_cover = alarm_hour + 1 %}
        {% if alarm_hour_cover > 23 %}{% set alarm_hour_cover = 0 %}{% endif %}
        {% if alarm_hour_cover < 10 %}0{% endif %}{{ alarm_hour_cover}}:{% if alarm_min_cover < 10 %}0{% endif %}{{ alarm_min_cover }}
        {% else %}
        {% if alarm_hour < 10 %}0{% endif %}{{ alarm_hour }}:{% if alarm_min_cover < 10 %}0{% endif %}{{ alarm_min_cover }}
        {% endif %}
        {% endif %}
    count_automations:
      entity_id: sensor.date
      value_template: "{{ states.automation | list | length }}"
    count_covers:
      entity_id: sensor.date
      value_template: "{{ states.cover | list | length }}"
    count_scripts:
      entity_id: sensor.date
      value_template: "{{ states.script | list | length }}"
    count_device_trackers:
      entity_id: sensor.date
      value_template: "{{ states.device_tracker | list | length }}"
    count_binary_sensors:
      entity_id: sensor.date
      value_template: "{{ states.binary_sensor | list | length }}"
    count_sensors:
      entity_id: sensor.date
      value_template: "{{ states.sensor | list | length }}"
    count_switches:
      entity_id: sensor.date
      value_template: "{{ states.switch | list | length }}"
    count_zones:
      entity_id: sensor.date
      value_template: "{{ states.zone | list | length }}"
    count_input_booleans:
      entity_id: sensor.date
      value_template: "{{ states.input_boolean | list | length }}"
    count_input_numbers:
      entity_id: sensor.date
      value_template: "{{ states.input_number | list | length }}"
    count_input_texts:
      entity_id: sensor.date
      value_template: "{{ states.input_text | list | length }}"
    count_input_selects:
      entity_id: sensor.date
      value_template: "{{ states.input_select | list | length }}"
    count_input_datetimes:
      entity_id: sensor.date
      value_template: "{{ states.input_datetime | list | length }}"
    count_lights:
      entity_id: sensor.date
      value_template: "{{ states.light | list | length }}"
    lights_on:
      entity_id: sensor.time
      value_template: "{{ states.light | selectattr('state', 'equalto', 'on') | rejectattr('attributes.is_deconz_group') | list | length }}"
    esp32_living_room_uptime:
      entity_id: sensor.esp32_living_room_uptime_raw
      value_template: "{{ ((states('sensor.esp32_living_room_uptime_raw') | float) / 60 / 60) | round(2) }}"
      unit_of_measurement: "h"
    esp32_living_room_version:
      entity_id: sensor.esp32_living_room_version_raw
      value_template: "{{ states('sensor.esp32_living_room_version_raw').split(' ',1)[0] }}"
